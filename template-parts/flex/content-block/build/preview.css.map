{"version":3,"file":"preview.css","mappings":";;;AAEA;ACFA;EACC;EACA;ACED;AC2DI;EF1DF;IAEE;ECCF;AACF;ADGC;EACC;EACA;ACDF;ADIC;EACC;ACFF;ADIE;EACC;ACFH;ADIG;EACC;EACA;ACFJ;ADOC;EAEC;ACNF;ADQE;EACC;EACA;EACA;EACA;EACA;EACA;ACNH;ADUC;EACC;ACRF;ADWC;EACC;ACTF;;ADaA;EACC;ACVD,C","sources":["webpack://IlariaX/./assets/sass/base/_sass_variables.scss","webpack://IlariaX/./template-parts/flex/content-block/_content-block.scss","webpack://IlariaX/./template-parts/flex/content-block/_content-block-preview.scss","webpack://IlariaX/./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["$fa-font-path: \"../fonts\";\n\n/* Fonts */\n// $font-body: 'Montserrat', helvetica, sans-serif;\n// $font-heading: 'NewYork', helvetica, sans-serif;\n\n// Bootstrap Overrides\n// $grid-columns: 12;\n// $grid-gutter-width: 30px;\n\n// Grid breakpoints\n// Define the minimum dimensions at which your layout will change,\n// adapting to different screen sizes, for use in media queries.\n// $grid-breakpoints: (\n//   xs: 0,\n//   sm: 576px,\n//   md: 768px,\n//   lg: 992px,\n//   xl: 1200px\n// );\n\n// Grid containers\n// Define the maximum width of `.container` for different screen sizes.\n$container-max-widths: (\n\tsm: 540px,\n\tmd: 720px,\n\tlg: 960px,\n\txl: 1300px\n);\n",".flex-content-block {\n\tbackground-size: cover;\n\tmargin-bottom: var(--spacing-bottom);\n\n\t.content {\n\t\tp:last-child {\n\t\t\t@include media-breakpoint-up(md) {\n\t\t\t\tmargin-bottom: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t.content-block-title {\n\t\tmargin-bottom: 50px;\n\t\ttext-align: center;\n\t}\n\n\tul {\n\t\tlist-style: none;\n\n\t\tli {\n\t\t\tpadding-left: 10px;\n\t\n\t\t\t&:before {\n\t\t\t\tcontent: '\\f81b';\n\t\t\t\tfont-family: 'Font Awesome 6 Pro';\n\t\t\t}\n\t\t}\n\t}\n\n\t&.o-light,\n\t&.o-dark {\n\t\tposition: relative;\n\n\t\t&::before {\n\t\t\tbottom: 0;\n\t\t\tcontent: \"\";\n\t\t\tleft: 0;\n\t\t\tposition: absolute;\n\t\t\tright: 0;\n\t\t\ttop: 0;\n\t\t}\n\t}\n\n\t&.o-light {\n\t\tbackground-color: rgba(255, 255, 255, 0.65);\n\t}\n\n\t&.o-dark {\n\t\tbackground-color: rgba(0, 0, 0, 0.65);\n\t}\n}\n\n.flex-full-width-image + .flex-content-block {\n\tmargin-top: -var(--spacing-bottom);\n}\n","/* Fonts */\n.flex-content-block {\n  background-size: cover;\n  margin-bottom: var(--spacing-bottom);\n}\n@media (min-width: 768px) {\n  .flex-content-block .content p:last-child {\n    margin-bottom: 0;\n  }\n}\n.flex-content-block .content-block-title {\n  margin-bottom: 50px;\n  text-align: center;\n}\n.flex-content-block ul {\n  list-style: none;\n}\n.flex-content-block ul li {\n  padding-left: 10px;\n}\n.flex-content-block ul li:before {\n  content: \"\\f81b\";\n  font-family: \"Font Awesome 6 Pro\";\n}\n.flex-content-block.o-light, .flex-content-block.o-dark {\n  position: relative;\n}\n.flex-content-block.o-light::before, .flex-content-block.o-dark::before {\n  bottom: 0;\n  content: \"\";\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.flex-content-block.o-light {\n  background-color: rgba(255, 255, 255, 0.65);\n}\n.flex-content-block.o-dark {\n  background-color: rgba(0, 0, 0, 0.65);\n}\n\n.flex-full-width-image + .flex-content-block {\n  margin-top: -var(--spacing-bottom);\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}