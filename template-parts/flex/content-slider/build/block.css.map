{"version":3,"file":"block.css","mappings":";;;AAEA;ACFA;EACC;EACA;EACA;ACED;ADAC;EACC;UAAA;ACEF;ADAE;EACC;ACEH;ADIC;EACC;EACA;ACFF;ADME;EACC;EACA;UAAA;ACJH;ADOE;EACC;EACA;UAAA;ACLH;ADSC;;EAEC;EACA;EAAA;ACPF;ADSE;;EACC;ACNH;ADQG;;EACC;EACA;ACLJ;ADUC;EACC;UAAA;ACRF;ADWG;EACC;UAAA;ACTJ;ADcC;EACC;UAAA;ACZF;ADeG;EACC;UAAA;ACbJ;ADkBC;EACC;AChBF;ADkBE;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AChBH;ACaI;EFNF;IAYE;ECfF;AACF;ADqBG;EACC;ACnBJ;ADwBC;EACC;EACA;ACtBF;ACCI;EFmBH;IAKE;IACA;ECrBD;AACF;ADwBC;EACC;EACA;EACA;EACA;ACtBF;ADyBC;;EAEC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ACvBF;ADyBE;;EACC;ACtBH;AD0BC;EACC;UAAA;EACA;ACxBF;AD2BC;EACC;EACA;UAAA;ACzBF;;AD6BA;EACC;AC1BD,C","sources":["webpack://IlariaX/./assets/sass/base/_sass_variables.scss","webpack://IlariaX/./template-parts/flex/content-slider/_content-slider.scss","webpack://IlariaX/./template-parts/flex/content-slider/_content-slider-preview.scss","webpack://IlariaX/./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["$fa-font-path: \"../fonts\";\n\n/* Fonts */\n// $font-body: 'Montserrat', helvetica, sans-serif;\n// $font-heading: 'NewYork', helvetica, sans-serif;\n\n// Bootstrap Overrides\n// $grid-columns: 12;\n// $grid-gutter-width: 30px;\n\n// Grid breakpoints\n// Define the minimum dimensions at which your layout will change,\n// adapting to different screen sizes, for use in media queries.\n// $grid-breakpoints: (\n//   xs: 0,\n//   sm: 576px,\n//   md: 768px,\n//   lg: 992px,\n//   xl: 1200px\n// );\n\n// Grid containers\n// Define the maximum width of `.container` for different screen sizes.\n$container-max-widths: (\n\tsm: 540px,\n\tmd: 720px,\n\tlg: 960px,\n\txl: 1300px\n);\n",".flex-content-slider {\n\tmargin-bottom: var(--spacing-bottom);\n\tbackground-color: var(--light-gray);\n\tpadding: var(--spacing-bottom-half) 0;\n\n\t.swiper-wrapper {\n\t\ttransition-delay: 0.75s !important;\n\n\t\t.swiper-slide {\n\t\t\toverflow: hidden;\n\t\t}\n\t}\n\n\n\n\t&.altrows {\n\t\tpadding: 0;\n\t\tbackground-color: transparent;\n\t}\n\n\t&.transitioning {\n\t\t.slide-left {\n\t\t\topacity: 0;\n\t\t\ttransform: translate3d(-100%, 0, 0);\n\t\t}\n\t\t\n\t\t.slide-right {\n\t\t\topacity: 0;\n\t\t\ttransform: translate3d(100%, 0, 0);\n\t\t}\n\t}\n\n\t.slide-left,\n\t.slide-right {\n\t\topacity: 1;\n\t\ttransition: all 0.75s ease-in-out;\n\n\t\tul li {\n\t\t\tpadding-left: 10px;\n\t\n\t\t\t&::marker {\n\t\t\t\tcontent: '\\f81b';\n\t\t\t\tfont-family: 'Font Awesome 6 Pro';\n\t\t\t}\n\t\t}\n\t}\n\n\t.slide-left {\n\t\ttransform: translate3d(0, 0, 0);\n\n\t\t.flex-content-slider__image {\n\t\t\t&:after {\n\t\t\t\tclip-path: polygon(92% 0, 100% 0, 100% 100%, 99% 100%);\n\t\t\t}\n\t\t}\n\t}\n\n\t.slide-right {\n\t\ttransform: translate3d(0, 0, 0);\n\n\t\t.flex-content-slider__image {\n\t\t\t&:after {\n\t\t\t\tclip-path: polygon(0 -8%, 8% 100%, 0 100%, 0 100%);\n\t\t\t}\n\t\t}\n\t}\n\n\t&__image {\n\t\tposition: relative;\n\n\t\t&:after {\n\t\t\tcontent: \"\";\n\t\t\tdisplay: block;\n\t\t\tposition: absolute;\n\t\t\ttop: -2px;\n\t\t\tbottom: -2px;\n\t\t\tleft: -2px;\n\t\t\tright: -2px;\n\t\t\tbackground-color: white;\n\t\t\tz-index: 5;\n\t\n\t\t\t@include media-breakpoint-down(lg) {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t}\n\n\t&.normal {\n\t\t.flex-content-slider__image {\n\t\t\t&:after {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t}\n\n\t&__content {\n\t\tpadding: 0 80px;\n\t\tmax-width: calc(1320px / 1.2);\n\n\t\t@include media-breakpoint-down(lg) {\n\t\t\tpadding: 0 15px;\n\t\t\tmax-width: 100%;\n\t\t}\n\t}\n\n\timg {\n\t\tposition: relative;\n\t\tz-index: 5;\n\t\twidth: 100%;\n\t\theight: auto;\n\t}\n\n\t.swiper-button-next,\n\t.swiper-button-prev {\n\t\tposition: absolute;\n\t\tfont-weight: bold;\n\t\ttext-transform: uppercase;\n\t\tdisplay: block;\n\t\ttop: 50%;\n\t\ttext-decoration: none;\n\t\tz-index: 10;\n\t\tbackground-color: rgba(255, 255, 255, 0.6);\n\t\tpadding: 10px 20px;\n\t\tcolor: #626262;\n\n\t\t&:hover {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.swiper-button-next {\n\t\ttransform: rotate(90deg);\n\t\tright: 0px;\n\t}\n\n\t.swiper-button-prev {\n\t\tleft: 0px;\n\t\ttransform: rotate(-90deg);\n\t}\n}\n\n.flex-full-width-image + .flex-content-slider {\n\tmargin-top: calc( var(--spacing-bottom) * -1);\n}\n","/* Fonts */\n.flex-content-slider {\n  margin-bottom: var(--spacing-bottom);\n  background-color: var(--light-gray);\n  padding: var(--spacing-bottom-half) 0;\n}\n.flex-content-slider .swiper-wrapper {\n  transition-delay: 0.75s !important;\n}\n.flex-content-slider .swiper-wrapper .swiper-slide {\n  overflow: hidden;\n}\n.flex-content-slider.altrows {\n  padding: 0;\n  background-color: transparent;\n}\n.flex-content-slider.transitioning .slide-left {\n  opacity: 0;\n  transform: translate3d(-100%, 0, 0);\n}\n.flex-content-slider.transitioning .slide-right {\n  opacity: 0;\n  transform: translate3d(100%, 0, 0);\n}\n.flex-content-slider .slide-left,\n.flex-content-slider .slide-right {\n  opacity: 1;\n  transition: all 0.75s ease-in-out;\n}\n.flex-content-slider .slide-left ul li,\n.flex-content-slider .slide-right ul li {\n  padding-left: 10px;\n}\n.flex-content-slider .slide-left ul li::marker,\n.flex-content-slider .slide-right ul li::marker {\n  content: \"\\f81b\";\n  font-family: \"Font Awesome 6 Pro\";\n}\n.flex-content-slider .slide-left {\n  transform: translate3d(0, 0, 0);\n}\n.flex-content-slider .slide-left .flex-content-slider__image:after {\n  clip-path: polygon(92% 0, 100% 0, 100% 100%, 99% 100%);\n}\n.flex-content-slider .slide-right {\n  transform: translate3d(0, 0, 0);\n}\n.flex-content-slider .slide-right .flex-content-slider__image:after {\n  clip-path: polygon(0 -8%, 8% 100%, 0 100%, 0 100%);\n}\n.flex-content-slider__image {\n  position: relative;\n}\n.flex-content-slider__image:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  bottom: -2px;\n  left: -2px;\n  right: -2px;\n  background-color: white;\n  z-index: 5;\n}\n@media (max-width: 991.98px) {\n  .flex-content-slider__image:after {\n    display: none;\n  }\n}\n.flex-content-slider.normal .flex-content-slider__image:after {\n  display: none;\n}\n.flex-content-slider__content {\n  padding: 0 80px;\n  max-width: 1100px;\n}\n@media (max-width: 991.98px) {\n  .flex-content-slider__content {\n    padding: 0 15px;\n    max-width: 100%;\n  }\n}\n.flex-content-slider img {\n  position: relative;\n  z-index: 5;\n  width: 100%;\n  height: auto;\n}\n.flex-content-slider .swiper-button-next,\n.flex-content-slider .swiper-button-prev {\n  position: absolute;\n  font-weight: bold;\n  text-transform: uppercase;\n  display: block;\n  top: 50%;\n  text-decoration: none;\n  z-index: 10;\n  background-color: rgba(255, 255, 255, 0.6);\n  padding: 10px 20px;\n  color: #626262;\n}\n.flex-content-slider .swiper-button-next:hover,\n.flex-content-slider .swiper-button-prev:hover {\n  opacity: 1;\n}\n.flex-content-slider .swiper-button-next {\n  transform: rotate(90deg);\n  right: 0px;\n}\n.flex-content-slider .swiper-button-prev {\n  left: 0px;\n  transform: rotate(-90deg);\n}\n\n.flex-full-width-image + .flex-content-slider {\n  margin-top: calc(var(--spacing-bottom) * -1);\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}